services:

  backend:
    # build: ./
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    container_name: fastapi
    # restart: always
    environment:
      # gunicorn will try to set as many workers as possible but
      # the default max_size of workers for async postgres is 10
      # so should you get more than 10 workers, db will complain.
      # https://github.com/tiangolo/full-stack-fastapi-postgresql/issues/1
      - MAX_WORKERS=5
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
    labels:
      # Enable Traefik for this specific "backend" service
      # needed because of the `--providers.docker.exposedbydefault=false` command in the
      # docker-compose.traefik.yml file
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      # note thet the name "app" is up to you, the command is `traefik.http.services.{service-name-of-your-choice}.{options-you-want}`
      # see https://doc.traefik.io/traefik/routing/providers/marathon/#services
      - traefik.http.services.app.loadbalancer.server.port=80
      # HTTP
      # Make Traefik use this domain in HTTP
      # traefik.http.routers.{router-name-of-your-choice}.
      # see https://doc.traefik.io/traefik/routing/providers/marathon/#routers
      # The entrypoints corresponds to the one we created `--entrypoints.http.address=:80`
      # in the docker-compose.traefik.yml file
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`fastapi.mathieuklimczak.com`)
      # Use the Traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # HTTPS
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`fastapi.mathieuklimczak.com`)
      - traefik.http.routers.app-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      # Corresponds to the `--certificatesresolvers.le.*` commands in the
      # docker-compose.traefik.yml file
      - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middlerware to redirect HTTP to HTTPS
      # Anything that happend to our app on HTTP will be redirect by the middlerware
      # above on HTTPS
      - traefik.http.routers.app-http.middlewares=https-redirect
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with https
      - traefik-public
      - db-network
    # environment:
    #   - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/postgres
    depends_on:
      - db

  db:
    image: postgres:14.2-bullseye
    container_name: postgre
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    networks:
      - db-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

  db-monitoring:
    image: dpage/pgadmin4:6.6
    container_name: pgadmin
    restart: always
    networks:
      - traefik-public
      - db-network
    depends_on:
      - db
    environment:
      - PGADMIN_DEFAULT_EMAIL=klimczak.mathieu@pm.me
      - PGADMIN_DEFAULT_PASSWORD=test
      - PGADMIN_LISTEN_PORT=5050
    labels:
        - traefik.enable=true
        - traefik.http.services.pgadmin.loadBalancer.server.port=5050
        # HTTP
        # Make Traefik use this domain in HTTP
        # traefik.http.routers.{router-name-of-your-choice}.
        # see https://doc.traefik.io/traefik/routing/providers/marathon/#routers
        # The entrypoints corresponds to the one we created `--entrypoints.http.address=:80`
        # in the docker-compose.traefik.yml file
        - traefik.http.routers.pgadmin-http.entrypoints=http
        - traefik.http.routers.pgadmin-http.rule=Host(`pgadmin.mathieuklimczak.com`)
        # Use the Traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # HTTPS
        # Make Traefik use this domain in HTTPS
        - traefik.http.routers.pgadmin-https.entrypoints=https
        - traefik.http.routers.pgadmin-https.rule=Host(`pgadmin.mathieuklimczak.com`)
        - traefik.http.routers.pgadmin-https.tls=true
        # Use the "le" (Let's Encrypt) resolver
        # Corresponds to the `--certificatesresolvers.le.*` commands in the
        # docker-compose.traefik.yml file
        - traefik.http.routers.pgadmin-https.tls.certresolver=le
        # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # Middlerware to redirect HTTP to HTTPS
        # Anything that happend to our app on HTTP will be redirect by the middlerware
        # above on HTTPS
        - traefik.http.routers.pgadmin-http.middlewares=https-redirect

  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime_kuma
    restart: always
    labels:
        - traefik.enable=true
        - traefik.http.services.kuma.loadBalancer.server.port=3001
        # HTTP
        # Make Traefik use this domain in HTTP
        # traefik.http.routers.{router-name-of-your-choice}.
        # see https://doc.traefik.io/traefik/routing/providers/marathon/#routers
        # The entrypoints corresponds to the one we created `--entrypoints.http.address=:80`
        # in the docker-compose.traefik.yml file
        - traefik.http.routers.kuma-http.entrypoints=http
        - traefik.http.routers.kuma-http.rule=Host(`kuma.mathieuklimczak.com`)
        # Use the Traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # HTTPS
        # Make Traefik use this domain in HTTPS
        - traefik.http.routers.kuma-https.entrypoints=https
        - traefik.http.routers.kuma-https.rule=Host(`kuma.mathieuklimczak.com`)
        - traefik.http.routers.kuma-https.tls=true
        # Use the "le" (Let's Encrypt) resolver
        # Corresponds to the `--certificatesresolvers.le.*` commands in the
        # docker-compose.traefik.yml file
        - traefik.http.routers.kuma-https.tls.certresolver=le
        # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # Middlerware to redirect HTTP to HTTPS
        # Anything that happend to our app on HTTP will be redirect by the middlerware
        # above on HTTPS
        - traefik.http.routers.kuma-http.middlewares=https-redirect
    volumes:
      - uptime-kuma:/app/data
    networks:
      - traefik-public

volumes:
  uptime-kuma:
  postgres_data:

networks:
  traefik-public:
    external: true
  db-network:

